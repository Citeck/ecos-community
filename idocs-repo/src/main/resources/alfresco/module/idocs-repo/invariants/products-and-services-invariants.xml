<?xml version="1.0" encoding="UTF-8"?>
<invariants xmlns="http://www.citeck.ru/ecos/invariants/1.0">

    <imports>
        <import uri="http://www.alfresco.org/model/dictionary/1.0" prefix="d" />
        <import uri="http://www.alfresco.org/model/content/1.0" prefix="cm" />
        <import uri="http://www.citeck.ru/model/products-and-services/1.0" prefix="pas" />
    </imports>

    <type name="pas:pasEntityCopied">
        <property name="pas:quantity">
            <invariant on="valid" language="javascript" description="Число должно быть положительным">value > 0</invariant>
            <invariant on="mandatory" language="explicit" description="Введено некорректное значение">true</invariant>
            <invariant on="default" language="javascript">1</invariant>
        </property>
        <property name="pas:total">
            <invariant on="valid" language="javascript" description="Число должно быть неотрицательным">value >= 0</invariant>
            <invariant on="mandatory" language="explicit" description="Введено некорректное значение">true</invariant>
            <invariant on="value" language="javascript">Math.round(node.properties["pas:pricePerUnit"] * node.properties["pas:quantity"] * 10000) / 10000</invariant>
        </property>
        <association name="pas:currency">
            <invariant on="default" language="javascript">
                <![CDATA[
                    (function() {
                        var sourceNode = getSourceNode();

                        if (sourceNode) {
                            var currencyAssocType = getCurrencyAssocType(sourceNode);

                            var sourceCurrency = (sourceNode.assocs[currencyAssocType] != null
                                && sourceNode.assocs[currencyAssocType].length > 0) ? sourceNode.assocs[currencyAssocType][0] : null;;

                            if (sourceCurrency) {
                                return sourceCurrency;
                            }
                        }

                        return new Node('workspace://SpacesStore/currency-rur');

                        function getSourceNode() {
                            var destinationNode = (view.params && view.params.destination) ? new Node(view.params.destination) : null;
                            return destinationNode || node.parent;
                        }

                        function getCurrencyAssocType(sourceNode) {
                            switch (sourceNode.typeShort) {
                                case "contracts:closingDocument":
                                    return "contracts:closingDocumentCurrency";
                                case "payments:payment":
                                    return "payments:currency";
                                default:
                                    return "idocs:currencyDocument";
                            }
                        }
                    })();
                ]]>
            </invariant>
            <invariant on="protected" language="explicit">true</invariant>
        </association>
    </type>

    <type name="pas:pasEntity">
        <property name="pas:pricePerUnit">
            <invariant on="valid" language="javascript" description="Число должно быть неотрицательным">value >= 0</invariant>
            <invariant on="mandatory" language="explicit" description="Введено некорректное значение">true</invariant>
            <invariant on="default" language="javascript">0</invariant>
        </property>
        <association name="pas:currency">
            <invariant on="mandatory" language="explicit">true</invariant>
        </association>
    </type>

    <type name="pas:pasEntityOriginal">
        <property name="pas:pricePerUnit">
            <invariant on="mandatory" language="explicit">true</invariant>
            <invariant on="valid" language="javascript" description="invariants.validation.no-more-then-2-after-decimal-point">
                <![CDATA[(function() {
                        var valueStr = value.toString(),
                            index = valueStr ? valueStr.indexOf(".") : -1,
                            count = index != -1 ? valueStr.length - (index + 1) : 0;
                        return count <= 2;
                    })()]]>
            </invariant>
        </property>
    </type>

</invariants>