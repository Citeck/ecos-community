<?xml version="1.0"?>

<project xmlns:artifact="antlib:org.apache.maven.artifact.ant" name="common-macros">

	<!-- Locale -->
	<property name="default.locale" value="en"/>

	<!-- Allow override properties -->
	<property file="build.properties" />
	<property file="${user.home}/build.properties" />

	<!-- module.release property -->
	<!-- should be empty for releases -->
	<!-- and "-SNAPSHOT" for snapshots -->
	<property name="module.release" value="-SNAPSHOT" />

	<property name="build.classifier" value="common" />

	<property name="project.dir" location="." />
	<property name="cfg.dir" location="${project.dir}/config" />
	<property name="lib.dir" location="${project.dir}/lib" />
	<property name="src.dir" location="${project.dir}/source" />
	<property name="src.java.dir" location="${src.dir}/java" />
	<property name="src.groovy.dir" location="${src.dir}/groovy" />
	<property name="src.web.dir" location="${src.dir}/web" />

	<property name="build.dir" location="${project.dir}/build" />
	<property name="build.cls.dir" location="${build.dir}/classes" />
	<property name="build.lib.dir" location="${build.dir}/lib" />
	<property name="build.web.dir" location="${build.dir}/web" />
	<property name="build.doc.dir" location="${build.dir}/doc" />

	<property name="test.dir" location="${build.dir}/test" />
	<property name="test.reports.dir" location="${test.dir}/reports" />
	<property name="test.cls.dir" location="${test.dir}/classes" />
	<property name="test.java.dir" location="test/java" />
	<property name="test.res.dir" location="test/resources" />
	<property name="test.lib.file" location="${test.dir}/${module.id}-${module.version}${module.release}-tests_${build.classifier}.jar" />
	<property name="test.webapp.path" location="${test.dir}/webapps/${webapp.name}.war" />
	<property name="test.is.critical" value="true" />
	
	<property name="lib.file" location="${build.lib.dir}/${module.id}-${module.version}${module.release}-${build.classifier}.jar" />
	<property name="javadoc.file" location="${build.lib.dir}/${module.id}-${module.version}${module.release}-javadoc.jar" />
	
	<property name="dist.dir" location="${build.dir}/dist" />
	<property name="dist.amp.dir" location="${dist.amps.dir}/${module.id}/${module.version}${module.release}" />
	<property name="dist.jar.dir" location="${dist.jars.dir}/${module.id}/${module.version}${module.release}" />
	<property name="dist.lib.dir" location="${dist.libs.dir}/${module.id}/${module.version}${module.release}" />
	<property name="dist.doc.dir" location="${dist.docs.dir}/${module.id}/${module.version}${module.release}" />
	<property name="dist.test.dir" location="${dist.tests.dir}/${module.id}/${module.version}${module.release}" />
    <property name="dist.loc.dir" location="${dist.dir}/localization/${module.id}" />
	
	<property name="pom.file" location="${dist.amp.dir}/${module.id}-${module.version}${module.release}.pom" />
	<property name="amp.file" location="${dist.amp.dir}/${module.id}-${module.version}${module.release}-${build.classifier}.amp" />
	<property name="jar.file" location="${dist.jar.dir}/${module.id}-${module.version}${module.release}-${build.classifier}.jar" />
	
	<property name="hotcopy.cfg.dir" location="${tomcat.home}/webapps/${webapp.name}/WEB-INF/classes" />
	<property name="hotcopy.lib.dir" location="${tomcat.home}/webapps/${webapp.name}/WEB-INF/lib" />
	<property name="hotcopy.web.dir" location="${tomcat.home}/webapps/${webapp.name}" />

	<property name="webapp.war.file" location="${tomcat.home}/webapps/${webapp.name}.war" />

	<property name="copy.overwrite" value="false" />

    <!-- allowed values: WHITESPACE_ONLY, SIMPLE, ADVANCED -->
    <!-- WARN: do not use ADVANCED, unless you know what you are doing -->
	<property name="web.minify.level" value="WHITESPACE_ONLY" />
    
    <!-- allowed values: google-closure, yuicompressor -->
    <property name="web.minify.impl" value="yuicompressor" />
    <condition property="web.minify.impl.google-closure">
        <equals arg1="${web.minify.impl}" arg2="google-closure" />
    </condition>
    <condition property="web.minify.impl.yuicompressor">
        <equals arg1="${web.minify.impl}" arg2="yuicompressor" />
    </condition>
    <fail message="Property 'web.minify.impl' has unsupported value: '${web.minify.impl}'. Supported values are 'google-closure' and 'yuicompressor'">
        <condition>
            <and>
                <isfalse value="${web.minify.impl.google-closure}" />
                <isfalse value="${web.minify.impl.yuicompressor}" />
            </and>
        </condition>
    </fail>

    <property name="web.package.includes" value="**/*" />
    <property name="web.package.excludes" value="" />

	<property name="project.java.version" value="1.7"/>

	<path id="static.classpath">
		<fileset dir="${lib.dir}" erroronmissingdir="false" />
		<pathelement path="${tomcat.home}/webapps/${webapp.name}/WEB-INF/lib/*"/>
		<pathelement path="${tomcat.home}/lib/*"/>
	</path>
    
	<path id="class.path">
		<path refid="project.classpath" />
		<path refid="static.classpath" />
	</path>

	<path id="groovy.classpath">
		<fileset dir="${tomcat.home}/webapps/${webapp.name}/WEB-INF/lib" includes="*.jar" />
	</path>
	
	<target name="skip">
		<!-- do nothing -->
	</target>

	<!--====================================-->
	<!--   conditional execution support    -->
	<!--====================================-->

	<target name="check.cfg">
		<available file="${cfg.dir}" type="dir" property="has.cfg" />
	</target>

	<target name="check.java">
		<available file="${src.java.dir}" type="dir" property="has.java" />
	</target>

	<target name="check.groovy">
        <available file="${src.groovy.dir}" type="dir" property="has.groovy" />
	</target>

	<target name="check.tests">
		<available file="${test.java.dir}" type="dir" property="has.tests" />
	</target>

	<target name="check.classes">
		<available file="${build.cls.dir}" type="dir" property="has.classes" />
	</target>

	<target name="check.web">
		<available file="${src.web.dir}" type="dir" property="has.web" />
	</target>

	<target name="clean">
		<delete dir="${build.dir}" />
	</target>

	<!--====================================-->
	<!--        dependency resolution       -->
	<!--====================================-->

	<target name="resolve-dependencies" depends="check.java" if="has.java">
		<!-- this can be overriden in project's build.xml -->
	</target>

	<macrodef name="resolve-dependency">
		<attribute name="groupId" />
		<attribute name="artifactId" />
		<attribute name="version" />
		<attribute name="type" default="jar" />
		<attribute name="classifier" default="" />
		<attribute name="repository" default="maven.central" />
		<attribute name="scope" default="runtime" />
		<sequential>
			<artifact:dependencies filesetId="@{artifactId}.@{type}" useScope="@{scope}">
				<dependency groupId="@{groupId}" artifactId="@{artifactId}" 
					version="@{version}" classifier="@{classifier}" type="@{type}" />
				<remoteRepository refid="@{repository}" />
			</artifact:dependencies>
			<pathconvert refid="@{artifactId}.@{type}" property="@{artifactId}.@{type}.path" />
		</sequential>
	</macrodef>

	<macrodef name="copy-dependency">
		<attribute name="todir" />
		<attribute name="groupId" />
		<attribute name="artifactId" />
		<attribute name="version" />
		<attribute name="type" default="jar" />
		<attribute name="classifier" default="" />
		<attribute name="repository" default="maven.central" />
		<sequential>
			<resolve-dependency groupId="@{groupId}" artifactId="@{artifactId}" 
					version="@{version}" classifier="@{classifier}" type="@{type}" 
					repository="@{repository}" />
			<copy file="${@{artifactId}.@{type}.path}"
			    tofile="@{todir}/@{artifactId}/@{version}/@{artifactId}-@{version}-@{classifier}.@{type}" />
		</sequential>
	</macrodef>

	<!-- maven central -->
	<artifact:remoteRepository id="maven.central" url="http://repo.maven.apache.org/maven2/" />
	
	<!-- alfresco maven repositories -->
	<artifact:remoteRepository id="alfresco.repository" url="https://maven.alfresco.com/nexus/content/groups/public" />
	
	<!--====================================-->
	<!--         code manipulations         -->
	<!--====================================-->

	<target name="compile" depends="check.java,resolve-dependencies" if="has.java">
		<mkdir dir="${build.cls.dir}" />
		<javac includeantruntime="false" classpathref="class.path" srcdir="${src.java.dir}" destdir="${build.cls.dir}" excludes="${compile.excludes}" 
			debug="on" source="${project.java.version}" target="${project.java.version}" fork="yes" encoding="utf-8" />
	</target>

	<target name="compile-groovy" depends="check.groovy,resolve-dependencies" if="has.groovy">
		<mkdir dir="${build.cls.dir}" />
        <taskdef name="groovyc"
            classname="org.codehaus.groovy.ant.Groovyc"
            classpathref="groovy.classpath" />
		<groovyc includeantruntime="false" srcdir="${src.groovy.dir}" destdir="${build.cls.dir}" 
			fork="yes" encoding="utf-8">
            <classpath>
                <pathelement path="${build.cls.dir}" />
                <path refid="class.path" />
            </classpath>
        </groovyc>
	</target>

	<target name="resolve-minify-dependencies" depends="resolve-minify-dependencies-google-closure,resolve-minify-dependencies-yuicompressor">
	</target>
    
    <target name="resolve-minify-dependencies-google-closure" if="web.minify.impl.google-closure">
		<resolve-dependency scope="compile" groupId="com.google.javascript" artifactId="closure-compiler" version="LATEST" />
		<pathconvert property="minifier.jar" refid="closure-compiler.jar" />
    </target>

    <target name="resolve-minify-dependencies-yuicompressor" if="web.minify.impl.yuicompressor">
		<resolve-dependency scope="compile" groupId="com.yahoo.platform.yui" artifactId="yuicompressor" version="LATEST" />
		<pathconvert property="minifier.jar" refid="yuicompressor.jar" />
    </target>

	<target name="generate-minify-script" depends="generate-minify-script-google-closure,generate-minify-script-yuicompressor">
    </target>
    
	<target name="generate-minify-script-google-closure" if="web.minify.impl.google-closure">
		<echo file="${build.dir}/minify-web.bat"><![CDATA[@echo OFF
set CP=%1
set INPUT_JS=%2
set OUTPUT_JS=%3
set OUTPUT_MAP=%OUTPUT_JS:~0,-3%.map
set COMPILATION_LEVEL=%4
set LANGUAGE=ECMASCRIPT5
java -classpath %CP% com.google.javascript.jscomp.CommandLineRunner --js %INPUT_JS% --js_output_file %OUTPUT_JS% --create_source_map %OUTPUT_MAP% --compilation_level %COMPILATION_LEVEL% --language_in %LANGUAGE%
if not "%ERRORLEVEL%"=="0" exit /b 1
for %%a in (%OUTPUT_MAP%) do echo //# sourceMappingURL=%%~na%%~xa >> %OUTPUT_JS%
echo %INPUT_JS% OK
		]]></echo>
		<echo file="${build.dir}/minify-web.sh"><![CDATA[#!/bin/bash
CP=$1
INPUT_JS=$2
OUTPUT_JS=$3
OUTPUT_MAP=`echo $3 | sed 's/\.js/\.map/'`
COMPILATION_LEVEL=$4
LANGUAGE=ECMASCRIPT5
java -classpath $CP com.google.javascript.jscomp.CommandLineRunner --js $INPUT_JS --js_output_file $OUTPUT_JS --create_source_map $OUTPUT_MAP --compilation_level $COMPILATION_LEVEL --language_in $LANGUAGE
case "$?" in
0) ;;
*) exit 1 ;;
esac
echo "//# sourceMappingURL=`echo $OUTPUT_MAP | sed -r 's/^.*[/]([^/]+)$/\1/'`" >> $OUTPUT_JS
echo $INPUT_JS OK
		]]></echo>
		<chmod file="${build.dir}/minify-web.sh" perm="+x" />
	</target>
    
	<target name="generate-minify-script-yuicompressor" if="web.minify.impl.yuicompressor">
		<echo file="${build.dir}/minify-web.bat"><![CDATA[@echo off
set CP=%1
set INPUT_JS=%2
set OUTPUT_JS=%3
set OUTPUT_MAP=%OUTPUT_JS:~0,-3%.map
set COMPILATION_LEVEL=%4
set OPTIONS=
if "%COMPILATION_LEVEL%"=="WHITESPACE_ONLY" set OPTIONS=--nomunge --disable-optimizations
for /f %%a in ("%INPUT_JS%") do set FILESIZE=%%~za
if "%FILESIZE%"=="0" goto zerosize
java -classpath %CP% com.yahoo.platform.yui.compressor.YUICompressor --charset UTF-8 %OPTIONS% %INPUT_JS% > %OUTPUT_JS%
if not "%ERRORLEVEL%"=="0" goto error
:ok
echo %INPUT_JS% OK
exit /b 0
:error
del %OUTPUT_JS%
exit /b 1
:zerosize
copy %INPUT_JS% %OUTPUT_JS%
goto ok
		]]></echo>
		<echo file="${build.dir}/minify-web.sh"><![CDATA[#!/bin/bash
CP=$1
INPUT_JS=$2
OUTPUT_JS=$3
OUTPUT_MAP=`echo $3 | sed 's/\.js/\.map/'`
COMPILATION_LEVEL=$4
OPTIONS=
case $COMPILATION_LEVEL in
WHITESPACE_ONLY) OPTIONS="--nomunge --disable-optimizations"
esac
case `stat -c "%s" $INPUT_JS` in
0)  copy $INPUT_JS $OUTPUT_JS
    echo $INPUT_JS OK
    exit 0 ;;
esac
java -classpath $CP com.yahoo.platform.yui.compressor.YUICompressor -o $OUTPUT_JS --charset UTF-8 $OPTIONS $INPUT_JS
case "$?" in
0) 
    echo $INPUT_JS OK ;;
*) 
    rm $OUTPUT_JS ;
    exit 1 ;;
esac
		]]></echo>
		<chmod file="${build.dir}/minify-web.sh" perm="+x" />
	</target>

	<target name="minify" depends="check.web,resolve-minify-dependencies,generate-minify-script" if="has.web">
		<mkdir dir="${build.web.dir}" />
        <copy todir="${build.web.dir}">
            <dirset dir="${src.web.dir}" />
        </copy>
        <apply osfamily="windows" executable="${build.dir}/minify-web.bat" dir="${project.dir}" relative="true" failonerror="true">
            <fileset dir="${src.web.dir}" includes="**/*.js" excludes="**/*-min.js" />
            <globmapper from="*.js" to="${build.web.dir}\*-min.js" />
            <arg value="${minifier.jar}" prefix="&quot;" suffix="&quot;" />
            <srcfile prefix="${src.web.dir}\" />
            <targetfile />
            <arg value="${web.minify.level}" />
        </apply>
        <apply osfamily="unix" executable="${build.dir}/minify-web.sh" dir="${project.dir}" relative="true" failonerror="true">
            <fileset dir="${src.web.dir}" includes="**/*.js" excludes="**/*-min.js" />
            <globmapper from="*.js" to="${build.web.dir}/*-min.js" />
            <arg value="${minifier.jar}" />
            <srcfile prefix="${src.web.dir}/" />
            <targetfile />
            <arg value="${web.minify.level}" />
        </apply>
	</target>

	<target name="generate-javadoc" depends="check.java" if="has.java">
		<javadoc sourcepath="${src.java.dir}" destdir="${build.doc.dir}" classpathref="class.path" encoding="UTF-8">
			<link href="http://docs.oracle.com/javase/7/docs/api/" />
			<link href="http://dev.alfresco.com/resource/docs/java" />
			<link href="http://docs.spring.io/spring/docs/3.0.x/api/" />
		</javadoc>
	</target>

	<!--====================================-->
	<!--           module packaging         -->
	<!--====================================-->

	<target name="package-default" depends="package-amp,package-dependencies,package-tests,package-javadoc" />

	<target name="package-dependencies" depends="resolve-dependencies">
		<!-- this can be overriden in project's build.xml -->
		<mkdir dir="${dist.deps.dir}" />
	</target>

	<target name="version-increment">
		<copy file="${project.dir}/module.properties" todir="${build.dir}" overwrite="true" />
		<tstamp>
			<format property="time" pattern="yy.MM.dd.HH.mm" />
		</tstamp>
		<replaceregexp file="${build.dir}/module.properties" match="^module.version=(.*)\s*$" replace="module.version=\1.${time}" byline="true" />
	</target>

	<target name="package-lib" depends="compile,compile-groovy,check.classes" if="has.classes">
		<mkdir dir="${dist.lib.dir}" />
		<jar destfile="${lib.file}" >
			<zipfileset erroronmissingdir="false" dir="${build.cls.dir}" includes="**/*.class" />
			<zipfileset erroronmissingdir="false" dir="${cfg.dir}/META-INF" prefix="META-INF" />
		</jar>
		<copy file="${lib.file}" todir="${dist.lib.dir}" overwrite="${copy.overwrite}" />
	</target>

	<target name="package-tests" depends="compile-tests,check.tests" if="has.tests">
		<mkdir dir="${test.dir}" />
		<jar destfile="${test.lib.file}" >
			<fileset dir="${test.cls.dir}" includes="**/*.class" />
		</jar>
		<copy file="${test.lib.file}" todir="${dist.test.dir}" overwrite="${copy.overwrite}" />
	</target>

	<target name="package-javadoc" depends="generate-javadoc,check.java" if="has.java">
		<mkdir dir="${dist.doc.dir}" />
		<mkdir dir="${build.doc.dir}" />
		<jar destfile="${javadoc.file}">
			<fileset dir="${build.doc.dir}" />
		</jar>
		<copy file="${javadoc.file}" todir="${dist.doc.dir}" overwrite="${copy.overwrite}" />
	</target>

	<target name="package-amp" depends="package-lib,minify,version-increment" description="Package AMP Module">
		<mkdir dir="${dist.amp.dir}" />
		<artifact:pom id="pom.file" groupid="${module.group}" artifactid="${module.id}" version="${module.version}${module.release}" packaging="pom" name="${module.id}" />
		<artifact:writepom pomRefId="pom.file" file="${pom.file}"/>
		<zip destfile="${amp.file}">
			<zipfileset erroronmissingdir="false" prefix="config" dir="${cfg.dir}" />
			<zipfileset erroronmissingdir="false" prefix="lib"    dir="${lib.dir}" />
			<zipfileset erroronmissingdir="false" prefix="lib"    dir="${build.lib.dir}" />
			<zipfileset erroronmissingdir="false" prefix="web"    dir="${src.web.dir}"   includes="${web.package.includes}" excludes="${web.package.excludes}" />
			<zipfileset erroronmissingdir="false" prefix="web"    dir="${build.web.dir}" includes="${web.package.includes}" excludes="${web.package.excludes}" />
			<fileset file="${build.dir}/module.properties" />
			<fileset file="file-mapping.properties" />
			<mappedresources>
				<fileset dir="${cfg.dir}">
					<include name="**/*_${default.locale}.properties" />
				</fileset>
				<globmapper from="*_${default.locale}.properties" to="config/*.properties"/>
			</mappedresources>
		</zip>
	</target>

	<target name="package-jar" depends="compile,minify" description="Package JAR module">
		<mkdir dir="${dist.jar.dir}" />
		<jar destfile="${jar.file}" >
			<zipfileset erroronmissingdir="false" dir="${cfg.dir}" />
			<zipfileset erroronmissingdir="false" dir="${build.cls.dir}" />
			<zipfileset erroronmissingdir="false" prefix="META-INF" dir="${src.web.dir}" />
			<zipfileset erroronmissingdir="false" prefix="META-INF" dir="${build.web.dir}" />
		</jar>
	</target>
    
    <target name="package-localization">
        <mkdir dir="${dist.loc.dir}" />
		<copy todir="${dist.loc.dir}" overwrite="${copy.overwrite}" force="true">
			<fileset dir="${cfg.dir}" erroronmissingdir="false">
                <include name="**/*.properties" />
				<exclude name="module.properties"/>
				<exclude name="file-mapping.properties"/>
				<exclude name="alfresco-global.properties"/>
				<exclude name="log4j.properties"/>
				<exclude name="dataTypeAnalyzers*.properties"/>
			</fileset>
        </copy>

    </target>

	<!--====================================-->
	<!--         module installation        -->
	<!--====================================-->

	<macrodef name="install-amp">
		<attribute name="amp-file" />
		<attribute name="war-file" />
		<sequential>
			<echo>Installing module "@{amp-file}" into application "@{war-file}"</echo>
			<java jar="${tomcat.home}/../bin/alfresco-mmt.jar" fork="true" failonerror="true">
				<arg value="install" />
				<arg value="@{amp-file}" />
				<arg value="@{war-file}" />
				<arg value="-force" />
				<arg value="-nobackup" />
			</java>
		</sequential>
	</macrodef>

	<macrodef name="install-amps">
		<attribute name="amp-dir" />
		<attribute name="war-file" />
		<sequential>
			<java jar="${tomcat.home}/../bin/alfresco-mmt.jar" fork="true" failonerror="true">
				<arg value="install" />
				<arg value="@{amp-dir}" />
				<arg value="@{war-file}" />
				<arg value="-force" />
				<arg value="-directory" />
				<arg value="-nobackup" />
			</java>
		</sequential>
	</macrodef>

	<!--====================================-->
	<!--           module hot-copy          -->
	<!--====================================-->

	<target name="hotcopy-tomcat" depends="hotcopy-tomcat-cfg,hotcopy-tomcat-lib,hotcopy-tomcat-web,hotcopy-tomcat-tests,hotcopy-default-locale" description="Copy to Tomcat classpath">
		<copy todir="${hotcopy.cfg.dir}/alfresco/module/${module.id}" overwrite="${copy.overwrite}">
			<fileset file="module.properties" />
			<fileset file="file-mapping.properties" />
		</copy>
	</target>

	<target name="hotcopy-tomcat-cfg" depends="check.cfg" if="has.cfg">
		<copy todir="${hotcopy.cfg.dir}" overwrite="${copy.overwrite}">
			<fileset dir="${cfg.dir}" erroronmissingdir="false" />
		</copy>
	</target>

	<target name="hotcopy-tomcat-lib" depends="package-lib,check.classes" if="has.classes">
		<copy todir="${hotcopy.lib.dir}" failonerror="false" overwrite="${copy.overwrite}">
			<fileset file="${lib.file}" erroronmissingdir="false" />
			<chainedmapper>
				<mapper type="flatten" />
				<mapper type="glob" from="*.jar" to="${module.id}.jar" />
			</chainedmapper>
		</copy>
		<copy todir="${hotcopy.lib.dir}" failonerror="false" overwrite="${copy.overwrite}">
			<fileset dir="${lib.dir}" erroronmissingdir="false" />
			<mapper type="flatten" />
		</copy>
	</target>

	<target name="hotcopy-tomcat-tests" depends="package-tests">
		<copy todir="${hotcopy.lib.dir}" failonerror="false" overwrite="${copy.overwrite}">
			<fileset file="${test.lib.file}" />
			<chainedmapper>
				<mapper type="flatten" />
				<mapper type="glob" from="*.jar" to="${module.id}-tests.jar" />
			</chainedmapper>
		</copy>
		<copy todir="${hotcopy.lib.dir}" failonerror="false" overwrite="${copy.overwrite}">
			<fileset refid="h2.jar" />
			<fileset refid="junit.jar" />
			<fileset refid="test-suite.jar" />
			<fileset refid="spring-test.jar" />
			<chainedmapper>
				<mapper type="flatten" />
				<mapper type="regexp" from="^([^0-9]*|h2)-[0-9].*\.jar$$" to="\1.jar" />
			</chainedmapper>
		</copy>
	</target>

	<target name="hotcopy-tomcat-web" depends="check.web,minify" if="has.web">
		<copy todir="${hotcopy.web.dir}" overwrite="${copy.overwrite}">
			<fileset dir="${src.web.dir}" erroronmissingdir="false" />
			<fileset dir="${build.web.dir}" erroronmissingdir="false" />
		</copy>
	</target>

	<target name="hotcopy-default-locale">
		<copy todir="${hotcopy.cfg.dir}" overwrite="${copy.overwrite}" force="true">
			<fileset dir="${cfg.dir}" erroronmissingdir="false">
				<include name="**/*_${default.locale}.properties" />
			</fileset>
			<globmapper from="*_${default.locale}.properties" to="*.properties"/>
		</copy>
	</target>

	<!--====================================-->
	<!--       validation and testing       -->
	<!--====================================-->
	
	<path id="test.dependencies">
		<fileset refid="junit.jar" />
		<fileset refid="spring-test.jar" />
		<fileset refid="h2.jar" />
		<fileset refid="h2-support.jar" />
		<fileset refid="test-suite.jar" />
		<!--<fileset refid="spring-webscripts.jar" />-->
	</path>
	
	<artifact:remoteRepository id="citeck.ext-releases" url="http://artifactory.citeck.ru/artifactory/ext-release-local/">
		<authentication username="ext" password="Qq123456"/>
	</artifact:remoteRepository>
	<artifact:remoteRepository id="citeck.ext-snapshots" url="http://artifactory.citeck.ru/artifactory/ext-snapshot-local/">
		<authentication username="ext" password="Qq123456"/>
	</artifact:remoteRepository>
	
	<target name="resolve-test-dependencies">
		<resolve-dependency scope="test" groupId="junit" artifactId="junit" version="4.5" />
		<resolve-dependency scope="test" groupId="org.springframework" artifactId="spring-test" version="3.0.5.RELEASE" />
		<resolve-dependency scope="test" groupId="com.h2database" artifactId="h2" version="1.3.173" />
		<resolve-dependency scope="test" groupId="tk.skuro.alfresco" artifactId="h2-support" version="${h2-support.version}" repository="citeck.ext-releases" />
		<resolve-dependency scope="test" groupId="ru.citeck.ecos.core" artifactId="test-suite" version="0.1-SNAPSHOT" repository="citeck.ext-snapshots" />
		<!--<resolve-dependency scope="test" groupId="org.springframework.extensions.surf" artifactId="spring-webscripts" version="1.2.0-SNAPSHOT" classifier="tests" repository="citeck.ext-snapshots" />-->
	</target>

    <target name="compile-tests" depends="check.tests,compile,resolve-test-dependencies" if="has.tests">
        <mkdir dir="${test.cls.dir}" />
        <javac includeantruntime="false" srcdir="${test.java.dir}" destdir="${test.cls.dir}" excludes="${compile.excludes}"
               debug="on" source="${project.java.version}" target="${project.java.version}" fork="yes" encoding="utf-8">
            <classpath>
                <path refid="test.dependencies" />
                <path refid="class.path" />
                <pathelement path="${build.cls.dir}" />
            </classpath>
        </javac>
    </target>
	
	<target name="test-get-webapp">
		<copy file="${webapp.war.file}" tofile="${test.webapp.path}" overwrite="true" />
	</target>

	<target name="install-dependencies">
	</target>
	
	<macrodef name="install-dependency">
		<attribute name="webapp" />
		<attribute name="groupId" />
		<attribute name="artifactId" />
		<attribute name="version" />
		<attribute name="type" default="amp" />
		<attribute name="classifier" default="" />
		<attribute name="repository" default="maven.central" />
		<sequential>
			<resolve-dependency groupId="@{groupId}" artifactId="@{artifactId}" 
					version="@{version}" classifier="@{classifier}" type="@{type}" 
					repository="@{repository}" />
			<install-amp war-file="@{webapp}" amp-file="${@{artifactId}.@{type}.path}" />
		</sequential>
	</macrodef>
	
    <target name="test" depends="compile-tests,resolve-test-dependencies,package-amp,test-get-webapp,install-dependencies" unless="no-testing">
	
		<!-- install amp file -->
		<install-amp war-file="${test.webapp.path}" amp-file="${amp.file}" />
		
		<!-- "deploy" war -->
		<unzip src="${test.dir}/webapps/${webapp.name}.war" dest="${test.dir}/webapps/${webapp.name}" />
		
		<!-- make alfresco web-application-context.xml accessible via classpath, if it exists -->
		<copy file="${test.dir}/webapps/${webapp.name}/WEB-INF/web-application-context.xml" 
		     todir="${test.dir}/webapps/${webapp.name}/WEB-INF/classes" 
		     failonerror="false" />
		
		<!-- specify test.dir property -->
		<echo file="${test.dir}/webapps/${webapp.name}/WEB-INF/classes/alfresco/module/test/alfresco-global.properties" message="" />
		<propertyfile file="${test.dir}/webapps/${webapp.name}/WEB-INF/classes/alfresco/module/test/alfresco-global.properties">
			<entry key="test.dir" value="${test.dir}" />
		</propertyfile>
		
		<!-- run tests -->
		<mkdir dir="${test.dir}/alf_data" />
		<mkdir dir="${test.dir}/reports" />
		<mkdir dir="${test.dir}/temp" />
		<available file="${test.cls.dir}" type="dir" property="has.compiled.tests" />
		<junit haltonfailure="off" haltonerror="off" failureproperty="tests.failed" 
			printsummary="yes" showoutput="yes" dir="${project.dir}" 
			fork="yes" forkmode="once" maxmemory="512M">
			<jvmarg value="-server"/>
			<jvmarg value="-XX:MaxPermSize=256M"/>
			<jvmarg value="-Dcom.sun.management.jmxremote"/>
			<jvmarg value="-Dsun.net.client.defaultConnectTimeout=2000"/>
			<jvmarg value="-Dsun.net.client.defaultReadTimeout=2000"/>
			<jvmarg value="-Djava.io.tmpdir=${test.dir}/temp"/>
			<classpath>
				<path refid="test.dependencies" />
				
				<fileset dir="${tomcat.home}/endorsed" includes="*.jar" />
				<fileset dir="${tomcat.home}/lib" includes="*.jar" />
				<pathelement path="${test.dir}/webapps/${webapp.name}/WEB-INF/classes" />
				<fileset dir="${test.dir}/webapps/${webapp.name}/WEB-INF/lib" includes="*.jar" />

				<pathelement location="${test.res.dir}" />
				<pathelement path="${test.cls.dir}" />
			</classpath>
			<formatter type="xml" />
			<test todir="${test.reports.dir}" name="ru.citeck.ecos.test.ApplicationContextTest" />
			<batchtest todir="${test.reports.dir}" if="has.compiled.tests">
				<fileset dir="${test.cls.dir}" includes="**/*Test.class" excludes="**/*IntegrationTest.class" erroronmissingdir="false" />
			</batchtest>
		</junit>
		
		<condition property="build.failed.through.tests">
			<and>
				<equals arg1="tests.failed" arg2="true" />
				<equals arg1="test.is.critical" arg2="true" />
			</and>
		</condition>
		
		<fail message="Some of the tests failed" if="build.failed.through.tests" />
		
	</target>
	
</project>
